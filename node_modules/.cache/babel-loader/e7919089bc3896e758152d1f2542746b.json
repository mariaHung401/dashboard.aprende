{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/a.micole_rebe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/a.micole_rebe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Signature from \"./Signature\";\nimport Policy from \"./Policy\";\nimport { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nimport { throwError } from './ErrorThrower';\n\nclass S3FileUpload {\n  static uploadFile(file, config) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var fd, key, url, params, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // Error Thrower :x:\n            throwError(config, file);\n            fd = new FormData();\n            key = \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name);\n            url = \"https://\".concat(config.bucketName, \".s3.amazonaws.com/\");\n            fd.append(\"key\", key);\n            fd.append(\"acl\", \"public-read\");\n            fd.append(\"Content-Type\", file.type);\n            fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n            fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n            fd.append(\"X-Amz-Credential\", \"\".concat(config.accessKeyId, \"/\").concat(dateYMD, \"/\").concat(config.region, \"/s3/aws4_request\"));\n            fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n            fd.append(\"X-Amz-Date\", xAmzDate);\n            fd.append(\"x-amz-meta-tag\", \"\");\n            fd.append(\"Policy\", Policy.getPolicy(config));\n            fd.append(\"X-Amz-Signature\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n            fd.append(\"file\", file);\n            params = {\n              method: \"post\",\n              headers: {\n                fd\n              },\n              body: fd\n            };\n            _context.next = 19;\n            return fetch(url, params);\n\n          case 19:\n            data = _context.sent;\n\n            if (data.ok) {\n              _context.next = 22;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.reject(data));\n\n          case 22:\n            return _context.abrupt(\"return\", Promise.resolve({\n              bucket: config.bucketName,\n              key: \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n              location: \"\".concat(url).concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n              result: data\n            }));\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  static deleteFile(fileName, config) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var fd, url, params, deleteResult;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            fd = new FormData();\n            url = \"https://\".concat(config.bucketName, \".s3-\").concat(config.region, \".amazonaws.com/\").concat(config.dirName ? config.dirName + \"/\" : \"\").concat(fileName);\n            fd.append(\"Date\", xAmzDate);\n            fd.append(\"X-Amz-Date\", xAmzDate);\n            fd.append(\"Authorization\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n            fd.append(\"Content-Type\", \"text/plain\");\n            params = {\n              method: \"delete\",\n              headers: {\n                fd\n              }\n            };\n            _context2.next = 9;\n            return fetch(url, params);\n\n          case 9:\n            deleteResult = _context2.sent;\n\n            if (deleteResult.ok) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(deleteResult));\n\n          case 12:\n            return _context2.abrupt(\"return\", Promise.resolve({\n              ok: deleteResult.ok,\n              status: deleteResult.status,\n              message: \"File Deleted\",\n              fileName: fileName\n            }));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n}\n\nconst uploadFile = S3FileUpload.uploadFile,\n      deleteFile = S3FileUpload.deleteFile;\nexport { uploadFile, deleteFile };\nexport default S3FileUpload;","map":{"version":3,"sources":["/Users/macbook/Desktop/a.micole_rebe/client/node_modules/react-s3/lib/ReactS3.js"],"names":["Signature","Policy","dateISOString","xAmzDate","dateYMD","throwError","S3FileUpload","uploadFile","file","config","fd","FormData","key","dirName","name","url","bucketName","append","type","accessKeyId","region","getPolicy","getSignature","params","method","headers","body","fetch","data","ok","Promise","reject","resolve","bucket","location","result","deleteFile","fileName","deleteResult","status","message"],"mappings":"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","sourcesContent":["import Signature from \"./Signature\";\nimport Policy from \"./Policy\";\nimport { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nimport { throwError } from './ErrorThrower';\n\nclass S3FileUpload {\n    static async uploadFile(file, config) {\n\n        // Error Thrower :x:\n        throwError(config, file);\n\n        const fd = new FormData();\n        const key = `${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`;\n        const url = `https://${config.bucketName}.s3.amazonaws.com/`;\n        fd.append(\"key\", key);\n        fd.append(\"acl\", \"public-read\");\n        fd.append(\"Content-Type\", file.type);\n        fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n        fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n        fd.append(\"X-Amz-Credential\", `${config.accessKeyId}/${dateYMD}/${config.region}/s3/aws4_request`);\n        fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n        fd.append(\"X-Amz-Date\", xAmzDate);\n        fd.append(\"x-amz-meta-tag\", \"\");\n        fd.append(\"Policy\", Policy.getPolicy(config));\n        fd.append(\"X-Amz-Signature\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n        fd.append(\"file\", file);\n\n        const params = {\n            method: \"post\",\n            headers: {\n                fd\n            },\n            body: fd\n        };\n\n        const data = await fetch(url, params);\n        if (!data.ok) return Promise.reject(data);\n        return Promise.resolve({\n            bucket: config.bucketName,\n            key: `${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`,\n            location: `${url}${config.dirName ? config.dirName + \"/\" : \"\"}${file.name}`,\n            result: data\n        });\n    }\n    static async deleteFile(fileName, config) {\n        const fd = new FormData();\n        const url = `https://${config.bucketName}.s3-${config.region}.amazonaws.com/${config.dirName ? config.dirName + \"/\" : \"\"}${fileName}`;\n        fd.append(\"Date\", xAmzDate);\n        fd.append(\"X-Amz-Date\", xAmzDate);\n        fd.append(\"Authorization\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n        fd.append(\"Content-Type\", \"text/plain\");\n\n        const params = {\n            method: \"delete\",\n            headers: {\n                fd\n            }\n        };\n\n        const deleteResult = await fetch(url, params);\n        if (!deleteResult.ok) return Promise.reject(deleteResult);\n        return Promise.resolve({\n            ok: deleteResult.ok,\n            status: deleteResult.status,\n            message: \"File Deleted\",\n            fileName: fileName\n        });\n    }\n}\nconst { uploadFile, deleteFile } = S3FileUpload;\nexport { uploadFile, deleteFile };\nexport default S3FileUpload;"]},"metadata":{},"sourceType":"module"}